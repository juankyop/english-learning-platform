---
import type { UseOfEnglishExercise } from '../../types/exercises';

interface Props {
  text: string;
  options: string[];
  correct: number;
  explanation: string;
}

const { text, options, correct, explanation } = Astro.props;
---

<div class="exercise-multiple-choice">
  <p class="text-lg mb-4">
    {text.split('[verb]').map((part, index, array) => (
      <>
        {part}
        {index < array.length - 1 && (
          <select class="mx-2 px-3 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500">
            <option value="">Select...</option>
            {options.map((option, optIndex) => (
              <option value={optIndex}>{option}</option>
            ))}
          </select>
        )}
      </>
    ))}
  </p>
  
  <div class="explanation mt-4 hidden">
    <div class="p-4 bg-primary-50 rounded-lg">
      <p class="text-primary-800">{explanation}</p>
    </div>
  </div>
</div>

<script>
  const exercises = document.querySelectorAll('.exercise-multiple-choice');
  
  exercises.forEach(exercise => {
    const select = exercise.querySelector('select');
    const explanation = exercise.querySelector('.explanation');
    
    select?.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      const selectedValue = parseInt(target.value);
      const correctValue = parseInt(target.dataset.correct || '0');
      
      if (selectedValue === correctValue) {
        target.classList.add('bg-green-50', 'border-green-500');
        target.classList.remove('border-red-500');
      } else {
        target.classList.add('bg-red-50', 'border-red-500');
        target.classList.remove('border-green-500');
      }
      
      explanation?.classList.remove('hidden');
    });
  });
</script> 