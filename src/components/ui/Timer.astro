---
interface Props {
  initialTime: number; // tiempo en segundos
}

const { initialTime } = Astro.props;
---

<div class="flex items-center text-gray-700">
  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
  </svg>
  <span id="timer" data-initial-time={initialTime}>
    {Math.floor(initialTime / 60)}:{(initialTime % 60).toString().padStart(2, '0')}
  </span>
</div>

<script>
  class Timer {
    private element: HTMLElement;
    private initialTime: number;
    private currentTime: number;
    private interval: number | null = null;

    constructor(element: HTMLElement) {
      this.element = element;
      this.initialTime = parseInt(element.dataset.initialTime || '0');
      this.currentTime = this.initialTime;
      this.updateDisplay();
    }

    start() {
      if (this.interval) return;
      
      this.interval = setInterval(() => {
        this.currentTime--;
        this.updateDisplay();
        
        if (this.currentTime <= 0) {
          this.stop();
          // Disparar evento de tiempo terminado
          document.dispatchEvent(new CustomEvent('timerComplete'));
        }
      }, 1000);
    }

    stop() {
      if (this.interval) {
        clearInterval(this.interval);
        this.interval = null;
      }
    }

    private updateDisplay() {
      const minutes = Math.floor(this.currentTime / 60);
      const seconds = this.currentTime % 60;
      this.element.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
  }

  // Inicializar el timer
  const timerElement = document.getElementById('timer');
  if (timerElement) {
    const timer = new Timer(timerElement);
    document.addEventListener('exerciseStart', () => timer.start());
  }
</script> 